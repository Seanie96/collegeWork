COMPILER Tastier

   const int // object kinds
      var = 0, proc = 1, constant = 3, array = 4;

   const int // types
      undef = 0, integer = 1, boolean = 2;

   public SymbolTable tab;
   public CodeGenerator gen;
  
/*-------------------------------------------------------------------------------------------*/

CHARACTERS

  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.
  digit = "0123456789".
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  stringCh = ANY - '"' - '\\' - cr - lf - tab.
  printableCh = '\u0020' .. '\u007e'.

/*-------------------------------------------------------------------------------------------*/

TOKENS

  number = digit { digit }.
  ident = letter { letter | digit }.
  string = '"' {stringCh | '\\' printableCh} '"'.

/*-------------------------------------------------------------------------------------------*/

COMMENTS FROM "//" TO lf
COMMENTS FROM "/*" TO "*/" NESTED

/*-------------------------------------------------------------------------------------------*/

IGNORE cr + lf + tab

/*-------------------------------------------------------------------------------------------*/

PRODUCTIONS

AddOp<out Op op>
=                        (. op = Op.ADD; .)
  ( '+'
  | '-'                  (. op = Op.SUB; .)
  )
.

/*-------------------------------------------------------------------------------------------*/

Expr<out int reg,        // load value of Expr into register
     out int type>       (. int typeR, regR; Op op; .)
  = SimExpr<out reg,
            out type>
  [ RelOp<out op>
    SimExpr<out regR,
            out typeR>   (.
                            if (type == typeR) {
                               type = boolean;
                               gen.RelOp(op, reg, regR);
                            }
                            else SemErr("incompatible types");
                         .)
   ]                     (. gen.ClearRegisters(); .)
.

/*-------------------------------------------------------------------------------------------*/

Primary<out int reg,     // load Primary into register
        out int type>    (. int n; Obj obj; string name; .)
=                        (.
                            type = undef;
                            reg = gen.GetRegister();
                         .)
  ( Ident<out name>      (.
                            obj = tab.Find(name); 
                            type = obj.type;
                            if (obj.kind == var || obj.kind == constant) {
                               if (obj.level == 0)
                                  gen.LoadGlobal(reg, obj.adr, name);
                               else
                                  gen.LoadLocal(reg, tab.curLevel-obj.level, obj.adr, name);
                               if (type == boolean)
                               // reset Z flag in CPSR
                                  gen.ResetZ(reg);
                            }
                            else SemErr("variable or constant expected!!!");
                         .)

  | number               (.
                            type = integer;
                            n = Convert.ToInt32(t.val);
                            gen.LoadConstant(reg, n);
                         .)

  | '-'
    Primary<out reg,
            out type>    (.
                            if (type == integer)
                               gen.NegateValue(reg);
                            else SemErr("integer type expected");
                         .)

  | "true"               (.
                               type = boolean;
                               gen.LoadTrue(reg);
                         .)

  | "false"              (.
                               type = boolean;
                               gen.LoadFalse(reg);
                         .)

  | '('
    Expr<out reg,
         out type>
    ')'

  )
.

/*-------------------------------------------------------------------------------------------*/

Ident<out string name>
= ident                  (. name = t.val; .)
.

/*-------------------------------------------------------------------------------------------*/

String<out string text>
= string                  (. text = t.val; .)
.

/*-------------------------------------------------------------------------------------------*/

MulOp<out Op op>
=                        (. op = Op.MUL; .)
  ( '*'
  | ("div" | "DIV")      (. op = Op.DIV; .)
  | ("mod" | "MOD")      (. op = Op.MOD; .)
  )
.

/*-------------------------------------------------------------------------------------------*/

ProcDecl<string progName>
                         (. Obj obj; string procName; .)
= "void"
  Ident<out procName>    (.
                            obj = tab.NewObj(procName, proc, undef, 0, -1, -1);
                            if (procName == "main")
                               if (tab.curLevel == 0)
                                  tab.mainPresent = true;
                               else SemErr("main not at lexic level 0");
                            tab.OpenScope();
                         .)
  '(' ')'
  '{'
     {
     VarDecl | ConstantDecl
     }
     {
     ProcDecl<progName>
     }                   (.
                            if (procName == "main")
                               gen.Label("Main", "Body");
                            else {
                               gen.ProcNameComment(procName);
                               gen.Label(procName, "Body");
                            }
                         .)
     { Stat }
  '}'                    (.
                            if (procName == "main") {
                               gen.StopProgram(progName);
                               gen.Enter("Main", tab.curLevel, tab.topScope.nextAdr);
                            } else {
                               gen.Return(procName);
                               gen.Enter(procName, tab.curLevel, tab.topScope.nextAdr);
                            }
                            tab.CloseScope();
                         .)
.

/*-------------------------------------------------------------------------------------------*/

RelOp<out Op op>
=                        (. op = Op.EQU; .)
  ( "="
  | '<'                  (. op = Op.LSS; .)
  | '>'                  (. op = Op.GTR; .)
  | "!="                 (. op = Op.NEQ; .)
  | "<="                 (. op = Op.LEQ; .)
  | ">="                 (. op = Op.GEQ; .)
  )
.

/*-------------------------------------------------------------------------------------------*/

SimExpr<out int reg,     //load value of SimExpr into register
        out int type>    (. int typeR, regR; Op op; .)
= Term<out reg,
       out type>
  { AddOp<out op>
    Term<out regR,
         out typeR>      (.
                            if (type == integer && typeR == integer)
                               gen.AddOp(op, reg, regR);
                            else SemErr("integer type expected");
                         .)
  }
.

/*-------------------------------------------------------------------------------------------*/

Stat                     (. int type; string name, arrayN; Obj obj; int reg; int n1 = 0, n2 = 0; int offset = 0;.)
= Ident<out name>        (. obj = tab.Find(name); .)
  [
  	'['
  		number			(. n1 = Convert.ToInt32(t.val); .)
  						(.
  							if (!(n1 >= 0 && n1 < obj.length1)) {
  								SemErr("Array Index out of bounds");
  							}
  						.)
  		[
  			','
  			number		(. n2 = Convert.ToInt32(t.val); .)
  						(.
  							if (!(n2 >= 0 && n2 < obj.length2)) {
  								SemErr("Array Index out of bounds");
  							}
  						.)
  		]
  	']'
  ]
  (":="               (.
                            if (!(obj.kind == var || obj.kind == array))
                               SemErr("cannot assign to procedure");
                         .)
      (Expr<out reg,
         out type>       (.	
                            if (type == obj.type || type == constant) {
                            	int length1 = tab.getLength1(obj);
								offset = ((n2) * length1) + n1;

                               if (obj.level == 0) {
                                  gen.StoreGlobal(reg, obj.adr + offset, name);
                               }
                               else {
                                gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr + offset, name);
                               }
                            }
                            else {
                           		SemErr("Assigned value of variable on right hand side is not the same type as the variable on the left hand side");
                            }
                         .)

       |
          
          "["              (. int srcIndex1 = 0; int srcIndex2 = 0; .)
          
          number           (. srcIndex1 = Convert.ToInt32(t.val); .)
          
          [
          	","
          	number		   (. srcIndex2 = Convert.ToInt32(t.val); .)
          ]

          "]"

          Ident<out arrayN> 

         				   (.
	                             Obj objectArray = tab.Find(arrayN);
	                             int srcIndex = 0;

	                             if (!(srcIndex1 >= 0 || srcIndex1 < objectArray.length1)) {
	                               SemErr("Error: array index out of bounds");
	                             }

	                             if (objectArray.type  != obj.type) {
	                               SemErr("Error: incompatible types within assignment");
	                             }

	                             srcIndex = (srcIndex2 * objectArray.length1) + srcIndex1;

	                             int nextReg = gen.GetRegister();

	                             if (objectArray.level == 0) {
	                                gen.LoadGlobal(nextReg, objectArray.adr + srcIndex, arrayN);
	                             }
	                             else {
	                                gen.LoadLocal(nextReg, tab.curLevel-obj.level, objectArray.adr + srcIndex, arrayN);
	                             }
	                             if (obj.type == boolean) {
	                             // reset Z flag in CPSR
	                                gen.ResetZ(nextReg);
	                             }

	                             if (obj.level == 0) {
	                               gen.StoreGlobal(nextReg, obj.adr + offset, name);
	                             }
	                             else {
	                               gen.StoreLocal(nextReg, tab.curLevel-obj.level, obj.adr + offset, name);
	                             }
                           .)

       )';'
  | '(' ')' ';'          (.
                            if (obj.kind == proc)
                               gen.Call(name);
                            else SemErr("object is not a procedure");
                         .)
  )

| "if"                   (. int l1, l2; l1 = 0; .)
  Expr<out reg,
       out type>         (.
                            if (type == boolean) {
                               l1 = gen.NewLabel();
                               gen.BranchFalse(l1);
                            }
                            else SemErr("boolean type expected");
                         .)
      Stat               (.
                            l2 = gen.NewLabel();
                            gen.Branch(l2);
                            gen.Label(l1);
                         .)
      [ "else"
      Stat
      ]               	 (. gen.Label(l2); .)

| "while"                (.
                            int l1, l2;
                            l1 = gen.NewLabel();
                            gen.Label(l1); l2=0;
                         .)
  Expr<out reg,
       out type>         (.
                            if (type == boolean) {
                               l2 = gen.NewLabel();
                               gen.BranchFalse(l2);
                            }
                            else SemErr("boolean type expected");
                         .)
   Stat                  (.
                            gen.Branch(l1);
                            gen.Label(l2);
                         .)

| "read"
  Ident<out name> ';'    (.
                            obj = tab.Find(name);
                            if (obj.type == integer) {
                               gen.ReadInteger(); 
                               if (obj.level == 0)
                                  gen.StoreGlobal(0, obj.adr, name);
                               else gen.StoreLocal(0, tab.curLevel-obj.level, obj.adr, name);
                            }
                            else SemErr("integer type expected");
                         .)

| "write"                (. string text; .)
  (
    Expr<out reg,
         out type>       (.
                            switch (type) {
                               case integer: gen.WriteInteger(reg, false);
                                             break; 
                               case boolean: gen.WriteBoolean(false);
                                             break;
                            }
                         .)
  | String<out text>     (. gen.WriteString(text); .)
  )
  ';'

| "writeln"
  // note - for strings use write with \n in text
  Expr<out reg,
       out type>           (.
                              switch (type) {
                                 case integer: gen.WriteInteger(reg, true);
                                               break;
                                 case boolean: gen.WriteBoolean(true);
                                               break;
                              }
                           .)
  ';'

| '{'                      (. tab.OpenSubScope(); .)
  { VarDecl | ConstantDecl}
  Stat { Stat }
  '}'                      (. tab.CloseSubScope(); .)
.

/*-------------------------------------------------------------------------------------------*/

Tastier                  (. string progName; .)
  = "program"
  Ident<out progName>    (. tab.OpenScope(); .)
  '{'
    { VarDecl | ConstantDecl}          // global variables
    { ProcDecl<progName> }
                         (. tab.CloseScope(); .)
  '}'
.

/*-------------------------------------------------------------------------------------------*/

Term<out int reg,        // load value of Term into register
     out int type>       (. int typeR, regR; Op op; .)
  = Primary<out reg,
            out type>
  { MulOp<out op>
    Primary<out regR,
            out typeR>
                         (.
                            if (type == integer && typeR == integer)
                               gen.MulOp(op, reg, regR);
                            else SemErr("integer type expected");
                         .)
  }
.

/*-------------------------------------------------------------------------------------------*/

Type<out int type>
=                        (. type = undef; .)
 ( "int"                 (. type = integer; .)
 | "bool"                (. type = boolean; .)
 )
.

/*-------------------------------------------------------------------------------------------*/

VarDecl                  (. string name; int type; int n1 = -1; int n2 = -1; int varType; .)
= Type<out type>
  Ident<out name>        (.  varType = 0; .)
  [
  		"["				
  		"1"
  		".."
  		number    
  				  (.
  				  			varType = 1;
                            n1 = Convert.ToInt32(t.val) - 1;
                            if(n1 <= 0) {
                            	SemErr("the length of the array cannot be <= 0.");
                            }
                           

                  .)
    [
	  ","					 		
	  "1"
	  ".."
	  number      (.	
	  					   varType = 2;
	  					   n2 = Convert.ToInt32(t.val) - 1;
	  					   if(n2 <= 0) {
                            	SemErr("the length of the array cannot be <= 0.");
                            }
	              .)
  	]
  	"]"
  ]		

  					(.
  						if(varType == 0) {
  							tab.NewObj(name, var, type, 0,  -1, -1);
  						}	else if(varType == 1) {
  							tab.NewObj(name, array, type, 1, n1, -1);
  						}	else if(varType == 2) {
  							tab.NewObj(name, array, type, 2, n1, n2);
  						}
  					.)	

  { ","
    Ident<out name>      (. tab.NewObj(name, var, type, 0, -1, -1); .)
  } ";"
.

/*-------------------------------------------------------------------------------------------*/

ConstantDecl             (. string name; Obj obj; int reg; int type;.)
= "const"
  Ident<out name>        (. obj = tab.NewObj(name, constant, integer, 0, -1, -1); .)
  "="
  Expr<out reg,
      out type>          (.
                            if (type == integer) {
                               if (obj.level == 0) {
                                  gen.StoreGlobal(reg, obj.adr, name);
                               }
                               else {
                               	  gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr, name);
                               }
                            }
                            else
                               SemErr("Needs to be of type int");
                         .)
  {
  	","
  	  Ident<out name>        (. obj = tab.NewObj(name, constant, integer, 0, -1, -1); .)
	  "="
	  Expr<out reg,
	      out type>          (.
	                            if (type == integer) {
	                               if (obj.level == 0) {
	                                  gen.StoreGlobal(reg, obj.adr, name);
	                               }
	                               else {
	                               	  gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr, name);
	                               }
	                            }
	                            else
	                               SemErr("Needs to be of type int");
	                         .)
  }
  ";"
.

END Tastier.
